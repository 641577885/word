const bm = require('../../utils/common.js')
var app = getApp();

Page({

  /**
   * 页面的初始数据
   */
  data: {
      searchvalue:'',
      current: 0,
      height: '',
      item:[
       {
         name: '区块链开发1',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发2',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发3',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发4',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发5',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发6',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发7',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发8',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发9',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发10',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发11',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发12',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发13',
        city:'杭州',
        price:'15-30k',
        level:'本科',
        year:'3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发14',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
       {
         name: '区块链开发15',
         city: '杭州',
         price: '15-30k',
         level: '本科',
         year: '3-5年',
         worktime: '2018-04-16'
       },
     ],
      indexH:0,
      // arrayH: [{ id: 1, name: "杭州墨匠科技" }, { id: 2, name: "杭州科技"}],
      indexS:0,
      indexX:0,
      array: ['选项1', '选项2', '选项3', '选项4'],
      date: '2016-09-01', 
      region: ['请选择', '请选择', '请选择'],
      customItem: '请选择',//为每一列的顶部添加一个自定义的项
      isshow:false,
      ispro:false,
      nowpage:1,
      size:6,
      isnext: true,//是否有下一页
      progress_txt: '0%', 
      count: 0, // 设置 计数器 初始为0
      num:0,
      countTimer: null // 设置 定时器 初始为null

  },  // 发送请求！
  //全部网站
  bindPickerChange: function (e) {
    this.setData({
      indexH: e.detail.value
    })
    var that=this;
    bm.requsetData("", "post", { indexH: that.data.indexH}, function (data) {
      // console.log(data)
      // that.setData({ item: data.lists });
      wx.pageScrollTo({
        scrollTop: 0
      })
    })
   
  },
  //工作城市
  bindRegionChange: function (e) {
    console.log('picker发送选择改变，携带值为', e.detail.value)
    this.setData({
      indexS: e.detail.value
    }) 
    var that = this;
    bm.requsetData("", "post", { indexS: that.data.indexS }, function (data) {
      console.log(data)
      // that.setData({ item: data.lists });
      wx.pageScrollTo({
        scrollTop: 0
      })
    })
  },

 //发布时间
  bindDateChange: function (e) {
    console.log('picker发送选择改变，携带值为', e.detail.value)
    this.setData({
      indexX: e.detail.value
    })
    var that = this;
    bm.requsetData("", "post", { indexX: that.data.indexX }, function (data) {
      console.log(data)
      // that.setData({ item: data.lists });
      wx.pageScrollTo({
        scrollTop: 0
      })
    })
  },
  //职位搬家
  movehome:function(){
    this.setData({isshow:!this.data.isshow})
    
    this.drawProgressbg();
    this.countInterval()
  },
//搜索
  bindKeyInput:function(e){
    this.setData({ searchvalue:e.detail.value});
    console.log(this.data.searchvalue)
  },
  toSearch:function(){
    console.log(111)
    var that = this;
    wx.showLoading({ title: '加载中' })
    // bm.requsetData("", "post", { search: that.data.search}, function (data) {
    //   console.log(data)
    //   // that.setData({ item: data.lists });
    //   wx.hideLoading()
    //   wx.stopPullDownRefresh();
    // })
  },
  //模拟后台返回数据
  
  SEVER_PHP: function (objs) {
   
    var items = this.data.item
    console.log(items)
    var that = this;
    var res = {};
    setTimeout(function () {
      res.nowpage = objs.nowpage;//第几页

      res.allcount = items.length;//总记录个数
      res.allpage = Math.ceil(items.length / objs.size)//总页数
      res.list = items.slice((objs.nowpage - 1) * objs.size, (objs.nowpage - 1) * objs.size + objs.size);//实际数据
      res.isnext = (objs.nowpage - 1) * objs.size + objs.size > items.length ? false : true//是否有下一页
      objs.success(res);
    }, 500);

  },
  //ajax请求数据  依据实际请求进行修改
  $_get: function (nowpage, size, success, err) {
    var that = this;
    that.SEVER_PHP({
      nowpage: nowpage,
      size: size,
      success: function (res) {
        
        //console.log(res, "接口返回结果");
        // console.log(that.data.item)
        success();//回调
        that.setData({ item: that.data.item.concat(res.item) })//接口实际数据
        console.warn(that.data.item.concat(res.item))
        that.setData({ nowpage: res.nowpage })//第几页
        that.setData({ isnext: res.isnext })//是否有下一页
        setTimeout(function () {//避免过快请求
          that.setData({ ispro: false })//标记不在请求中
        }, 1000)

      },
      err: function () {
        err();//回调
        setTimeout(function () {//避免过快请求
          that.setData({ ispro: false })//标记不在请求中
        }, 1000)

      }
    });
  },
  //滚动到顶部/左边，会触发 scrolltoupper 事件
  evupper: function () {
    var that = this
    if (!that.data.ispro) {//没有在请求中，开始加载数据
      that.setData({ nowpage: 1 })
      //第一页数据
      that.setData({ ispro: true })//标记在请求中
      wx.showToast({
        mask: true,
        title: '加载中...',
        icon: 'loading',
        duration: 500
      })
      console.warn(11)
      that.$_get(
        that.data.nowpage,
        that.data.size
        , function () {
          //刷新操作，清空数据
          that.setData({ item: [] })
          console.warn(22)
          console.log("第1页加载成功")
          console.warn(that.data.item)
          wx.showToast({
            mask: true,
            title: '加载成功',
            icon: 'success',
            duration: 500
          })
          wx.stopPullDownRefresh()//停止当前页面下拉刷新。
        },
        function () {
          console.log("第1页加载失败")
          wx.showToast({
            mask: true,
            title: '加载失败',
            icon: 'none',
            duration: 500
          })
          wx.stopPullDownRefresh()//停止当前页面下拉刷新。
        })

    }

  },
  //滚动到底部/右边，会触发 scrolltolower 事件
  evlower: function () {
    var that = this
    if (!that.data.ispro) {//没有在请求中，开始加载数据
      if (that.data.isnext) {//有下一页数据
        //下一页数据
        that.setData({ ispro: true })//标记在请求中
        wx.showToast({
          mask: true,
          title: '加载中...',
          icon: 'loading',
          duration: 500
        })
        //触底操作，追加一页
        var addpage = that.data.nowpage + 1;
        that.$_get(
          addpage,
          that.data.size
          , function () {
            console.log("第" + addpage + "页加载成功")
            wx.showToast({
              mask: true,
              title: '加载成功',
              icon: 'success',
              duration: 500
            })
          },
          function () {
            console.log("第" + addpage + "页加载失败")
            wx.showToast({
              mask: true,
              title: '加载失败',
              icon: 'none',
              duration: 500
            })
          })
      } else {
        console.log("没有数据了")
        wx.showToast({
          mask: true,
          title: '没有数据了',
          icon: 'none',
          duration: 500
        })
      }
    }

  },
  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
     var that=this;
     that.setData({ ispro:true});
     wx.showToast({
       mask: true,
       title: '加载中...',
       icon: 'loading',
       duration: 500
     })
     that.$_get(
       that.data.nowpage,
       that.data.size
       , function () {
         console.log("第1页加载成功")
         wx.showToast({
           mask: true,
           title: '加载成功',
           icon: 'success',
           duration: 500
         })
       },
       function () {
         console.log("第1页加载失败")
         wx.showToast({
           mask: true,
           title: '加载失败',
           icon: 'none',
           duration: 500
         })
       })
     

  },

  
  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {
    var that=this;
    bm.requsetData("", "post", {}, function (data) {
      console.log(data)
      // that.setData({ item: data.lists });
      wx.pageScrollTo({
        scrollTop: 0
      })
    })
    
  },


  //进度条加载
  drawProgressbg: function () {
    // 使用 wx.createContext 获取绘图上下文 context
    var ctx = wx.createCanvasContext('canvasProgressbg')
    ctx.setLineWidth(4);// 设置圆环的宽度
    ctx.setStrokeStyle('#5e5e5e'); // 设置圆环的颜色
    ctx.setLineCap('round') // 设置圆环端点的形状
    ctx.beginPath();//开始一个新的路径
    ctx.arc(110, 110, 60, 0, 2 * Math.PI, false);
    //设置一个原点(100,100)，半径为90的圆的路径到当前路径
    ctx.stroke();//对当前路径进行描边
    ctx.draw();
  },
  drawCircle: function (step) {
    var context = wx.createCanvasContext('canvasProgress');
    context.setLineWidth(6);
    context.setStrokeStyle('#fede01');
    context.setLineCap('round')
    context.beginPath();
    // 参数step 为绘制的圆环周长，从0到2为一周 。 -Math.PI / 2 将起始角设在12点钟位置 ，结束角 通过改变 step 的值确定
    context.arc(110, 110, 60, -Math.PI / 2, step * Math.PI - Math.PI / 2, false);
    context.stroke();
    context.draw()
  },

  countInterval: function () {
    // 设置倒计时 定时器 每100毫秒执行一次，计数器count+1 ,耗时6秒绘一圈
    this.countTimer = setInterval(() => {
      if (this.data.count <= 60) {
        /* 绘制彩色圆环进度条 
        注意此处 传参 step 取值范围是0到2，
        所以 计数器 最大值 60 对应 2 做处理，计数器count=60的时候step=2
        */
        this.drawCircle(this.data.count / (60 / 2))
        this.data.count++;
       
      } else {
        this.setData({
          progress_txt: "100%"
        });
        clearInterval(this.countTimer);
        // this.setData({isshow:!this.data.isshow})
        wx.redirectTo({
          url: 'positionmove',
        })

       
      }
    }, 100)
    // clearInterval(this.countTimer);
  },
})