// pages/worker/message/message.js
var bm = require('../../utils/common.js')
var webim = require('../../utils/webim.js');
var webimhandler = require('../../utils/webim_handler.js');
const Page = require('../../utils/ald-stat.js').Page;
var app = getApp();
var selType = webim.SESSION_TYPE.C2C;
Page({

  /**
   * 页面的初始数据
   */
  data: {
    message_list: [],
    xm_msg: '',
    xm_msg_status: false,
    xm_msg_num: null,
  },
  //我的最近联系人
  getRecentContactList:function () {
    var that = this;
    var options = {
      'Count': 90  //最近的会话数
    };
    webim.getRecentContactList(
      options,
      function (resp) {
        var data = [];
        var tempSess, tempSessMap = {};//临时会话变量
        var sessMap = webim.MsgStore.sessMap();
        if (resp.SessionItem && resp.SessionItem.length > 0) {
          for (var i in resp.SessionItem){
            var item = resp.SessionItem[i];
            var type = item.Type;//接口返回的会话类型
            var sessType, typeZh, sessionId, unread, sessionNick = '', sessionImage = '', senderId = '', senderNick = '';
            if (type == webim.RECENT_CONTACT_TYPE.C2C) {//私聊
              typeZh = '私聊';
              sessType = webim.SESSION_TYPE.C2C;//设置会话类型
              sessionId = item.To_Account;//会话id，私聊时为好友ID或者系统账号（值为@TIM#SYSTEM，业务可以自己决定是否需要展示），注意：从To_Account获取,
              if (sessionId == '@TIM#SYSTEM') {//先过滤系统消息，，
                webim.Log.warn('过滤好友系统消息,sessionId=' + sessionId);
                continue;
              }
              if (wx.getStorageSync('local' + sessionId).name) {//从infoMap获取c2c昵称
                sessionNick = wx.getStorageSync('local' + sessionId).name;//会话昵称，私聊时为好友昵称，接口暂不支持返回，需要业务自己获取（前提是用户设置过自己的昵称，通过拉取好友资料接口（支持批量拉取）得到）
              } else {//没有找到或者没有设置过
                sessionNick = sessionId;//会话昵称，如果昵称为空，默认将其设成会话id
              }
              if (wx.getStorageSync('local' + sessionId).image) {//从infoMap获取c2c头像
                sessionImage = wx.getStorageSync('local' + sessionId).image;//会话头像，私聊时为好友头像，接口暂不支持返回，需要业务自己获取（前提是用户设置过自己的昵称，通过拉取好友资料接口（支持批量拉取）得到）
              } else {//没有找到或者没有设置过
                sessionImage = app.globalData.friendHeadUrl;//会话头像，如果为空，默认将其设置demo自带的头像
              }
            }
            tempSess = tempSessMap[sessType + "_" + sessionId];
            var sess = sessMap['C2C' + sessionId];
            if (sess){
              unread = sess.unread();
            }else{
              unread=0;
            }

            if (!tempSess) {//先判断是否存在（用于去重），不存在增加一个
              tempSessMap[sessType + "_" + sessionId] = true;
              var info = item.MsgShow.split("-")[0];
              if (info.indexOf('[:excontact]') != -1){
                info="交换联系方式请求"
              }
              if (info.indexOf('[:contact]') != -1) {
                info="查看联系方式"
              }
              if (info.indexOf('[:hire]') != -1) {
                info = "订单信息"
              }
              if (info.indexOf('[:IMAGES]') != -1) {
                info = "图片"
              }
              if (info.indexOf('[:resume]') != -1) {
                info = "简历请求"
              }
              if (info.indexOf('[:default]') != -1) {
                info = item.MsgShow.split("-")[1]
              }
              if (info.indexOf('[:position]') != -1) {
                info = "消息"
              }
              if (info.indexOf('[:demand]') != -1) {
                info = "消息"
              }
              data.push({
                skipId: sessionId, 
                avatar: sessionImage, 
                nickname: sessionNick, 
                info: info,
                unread: unread
              });
            }
          }
          that.setData({
            message_list: data
          })
        }
      },
      function (err) {
        wx.showToast({
          title: err.ErrorInfo,
          icon:"none"
        });
      }
    );
  },

  addSess: function (newMsg){
    var selToID = newMsg.getSession().id();
    var selName = newMsg.getSession().name();
    var content = newMsg.elems[0].content.text;
    var imageUrl;
    var sessMap = webim.MsgStore.sessMap();
    var sess = sessMap['C2C' + selToID];
    if (sess) {
      var unread = sess.unread();
    } else {
      var unread = 0;
    }
    app.getAvatar(selToID.toString(), function (res) {
      imageUrl = res;
    })
    this.data.message_list.unshift({
      skipId: selToID,
      avatar: imageUrl,
      nickname: selName,
      info: content,
      unread: unread
    })
    this.setData({
      message_list: this.data.message_list
    })
  },
  getnoticeOne: function () {
    var that = this;
    bm.requsetData('/c/action/getNoticeOne', 'get', '', function (data) {
      if (data.data.errcode == 0) {
        if (data.data.msg.title.length > 0) {
          that.setData({
            xm_msg: data.data.msg.title,
            xm_msg_status: true,
            xm_msg_num: data.data.msg.newnum
          })
          if (data.data.msg.newnum == 0) {
            that.setData({
              xm_msg_status: false,
            })
          }

        }
      } else {
        wx.showToast({
          title: data.data.errmsg,
          icon: 'none'
        })
      }
    })
  },
  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function () {
    wx.setStorageSync('showList', 0)
    var that = this
    //获取历史记录
    if (app.globalData.auth) {
      app.login(function () {
        app.initIM();
      });
      that.getnoticeOne();
    } else {
      app.authCallback = auth => {
        app.login(function () {
          app.initIM();
        });
        that.getnoticeOne();
      }
    }
  },
  onShow: function () {
    if (wx.getStorageSync('showList')) {
      this.getRecentContactList();
      webim.syncMsgs(app.initUnreadMsgCount);
    }
    wx.setStorageSync('showList', 1)
  }
})