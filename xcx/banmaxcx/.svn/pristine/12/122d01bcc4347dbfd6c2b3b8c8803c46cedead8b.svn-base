//wx.request 微信请求
var host ='http://www.ksbanma.com';
//var host = 'https://www.itszebra.com';
function requsetData(url, method, query, fun, notoken) {
  var app = getApp();
  if(notoken){
    var url = host + url; 
  } else {
    if (url.indexOf('?') != -1) {
      var url = host + url + '&access_token=' + app.globalData.token;
    }else{
      var url = host + url + '?access_token=' + app.globalData.token;
    }
  }
  wx.request({
    url: url,
    data: query,
    method: method, // OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT
    success: function (res) {
      fun(res)
    },
    fail: function () {
      // fail
    },
    complete: function () {
      // complete
    }
  })
}

function sessionRequset(url, query, fun, session_id) {
  // if (session_id != "" && session_id != null) {
  //   var header = { 'content-type': 'application/x-www-form-urlencoded', 'Cookie': 'PHPSESSID=' + session_id }
  // } else {
  //   var header = { 'content-type': 'application/x-www-form-urlencoded' }
  // }
  if (session_id != "" && session_id != null) {
    query.se_key = session_id;
  }
  wx.request({
    url: host + url,
    //header: header,
    data: query,
    success: function (res) {
      fun(res.data)
    },
    fail: function () {
      // fail
    },
    complete: function () {
      // complete
    }
  })
}


//正则表达式验证
function regEx(content, type) {
  var reg;
  if (type == 'id')//身份证
    reg = /(^\d{15})|(^\d{18})|(^\d{17}(\d|X|x))/;
  else if (type == 'email')
    reg = /^([a-zA-Z0-9]+[_|\_|\.|\-]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,3}/;
  else if (type == 'cell')
    reg = /^1[3|4|5|8|7][0-9]\d{8}/;
  else if (type == 'isnum')
    // reg = /^[0-9]*/;
    reg = /^[0-9]*$/;
  else if (type == 'url')
    reg = /^http(s?):\/\/(?:[A-za-z0-9-]+\.)+[A-za-z]{2,4}(?:[\/\?#][\/=\?%\-&~`@[\]\':+!\.#\w]*)?/;
  else if (type == 'password')
    reg = /^[0-9a-zA-Z]{6,20}$/;
  else if (type == 'qq')
    reg = /^[1-9]\d{4,10}$/;
  return reg.test(content) ? true : false;
}

function formatMonth(number) {
  if (number){
    var n = number * 1000;
    var date = new Date(n); 
  }else{
    var date = new Date(); 
  }
  var year = date.getFullYear()
  var month = date.getMonth() + 1
  return [year, month].map(formatNumber).join('-')
}

function formatDate(number) {
  var n = number * 1000;
  var date = new Date(n);
  var year = date.getFullYear()
  var month = date.getMonth() + 1
  var day = date.getDate()
  return [year, month, day].map(formatNumber).join('-')
}

function formatToday(num){
  var myDate = new Date();
  if(num){
    myDate.setDate(myDate.getDate() + num)
  }
  var year = myDate.getFullYear()
  var month = myDate.getMonth() + 1
  var day = myDate.getDate()
  return [year, month, day].map(formatNumber).join('-')
}

function GetNextMonthDay(dd,m) {
  var t = dd.split('-');
  var year = t[0];
  var month = t[1];
  var day = t[2];
  var days = new Date(year, month, 0);
  days = days.getDate();
  var year2 = year;
  var month2 = parseFloat(month) + m;
  if (month2 >= 13) {
    year2 = parseInt(year2) + 1;
    month2 = month2 % 12 == 0 ? 12 : month2 % 12;
  }
  var day2 = day;
  var days2 = new Date(year2, month2, 0);
  days2 = days2.getDate();
  if (day2 > days2) {
    day2 = days2;
  }
  if (month2 < 10) {
    month2 = '0' + month2;
  }
  var t2 = year2 + '-' + month2 + '-' + day2 + " 00:00:00";
  var tmp_datetime = t2.replace(/:/g, '-');
  tmp_datetime = tmp_datetime.replace(/ /g, '-');
  var arr = tmp_datetime.split("-");
  var now = new Date(Date.UTC(arr[0], arr[1] - 1, arr[2], arr[3] - 8, arr[4], arr[5]));
  var gdate = new Date(parseInt(now.getTime()) - 3600 * 24 * 1000);
  var y = gdate.getFullYear();
  var m = gdate.getMonth() + 1;
  var d = gdate.getDate();
  return [y, m, d].map(formatNumber).join('-')
}

function formatNumber(n) {
  n = n.toString()
  return n[1] ? n : '0' + n
}



module.exports = { requsetData, sessionRequset, regEx, formatMonth, formatDate, formatToday, GetNextMonthDay }